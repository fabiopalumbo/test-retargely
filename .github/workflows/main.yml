name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  test-retargely-actions:
    name: Workflow
    runs-on: ubuntu-latest
    steps:

    - name: Checkout Repository
      uses: actions/checkout@master

    - name: Code Review
      id: fmt
      uses: kitabisa/sonarqube-action@master
      with:
        host: ${{ secrets.SONARQUBE_HOST }}
        login: ${{ secrets.SONARQUBE_TOKEN }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Configure Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.13.4

    - name: Terraform init
      uses: hashicorp/setup-terraform@v1
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color      

    - name: Terraform plan
      id: plan
      run: terraform plan -no-color        
        
    - name: Integration Test
      id: test
      run: |
        echo "Terratest"

    - name: Terraform apply
      if: github.ref == 'refs/heads/master_test'
      id: apply
      run: terraform apply -no-color         

    - name: Deploy Lambda
      uses: appleboy/lambda-action@master
      with:
        aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws_region: ${{ secrets.AWS_REGION }}
        function_name: s3_text_return
        source: functions/s3_text_return.py.js

    - name: Comment on PR
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        format_out: ${{ steps.fmt.outputs.stdout }}
        format_err: ${{ steps.fmt.outputs.stderr }}
        init_out: ${{ steps.init.outputs.stdout }}
        init_err: ${{ steps.init.outputs.stderr }}
        validate_out: ${{ steps.validate.outputs.stdout }}
        validate_err: ${{ steps.validate.outputs.stderr }}
        plan: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const CODE_BLOCK = '```';
          const fmt_result = '${{ steps.fmt.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
          const init_result = '${{ steps.init.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
          const validate_result = '${{ steps.validate.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
          const plan_result = '${{ steps.plan.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
          const output = `
          ### ${ fmt_result } Format and Style üé®
          <details><summary>Logs</summary>
          Output
          ${ CODE_BLOCK }diff
          ${ process.env.format_out }
          ${ CODE_BLOCK }
          Errors
          ${ CODE_BLOCK }
          ${ process.env.format_err }
          ${ CODE_BLOCK }
          </details> <!-- End Format Logs -->
          ### ${ init_result } Initialization ‚öôÔ∏è
          <details><summary>Logs</summary>
          Output
          ${ CODE_BLOCK }
          ${ process.env.init_out }
          ${ CODE_BLOCK }
          Errors
          ${ CODE_BLOCK }
          ${ process.env.init_err }
          ${ CODE_BLOCK }
          </details> <!-- End Init Logs -->
          ### ${ validate_result } Validation ü§ñ
          <details><summary>Logs</summary>
          Output
          ${ CODE_BLOCK }
          ${ process.env.validate_out }
          ${ CODE_BLOCK }
          Errors
          ${ CODE_BLOCK }
          ${ process.env.validate_err }
          ${ CODE_BLOCK }
          </details> <!-- End Validate Logs -->
          ### ${ plan_result } Plan üìñ
          <details><summary>Logs</summary>
          ${ CODE_BLOCK }
          ${ process.env.plan }
          ${ CODE_BLOCK }
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
          
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
          
    - name: 'End results'
      shell: bash
      run: |
        echo fmt
        test ${{ steps.fmt.outputs.exitcode }} -eq 0 || true
        echo init
        test ${{ steps.init.outputs.exitcode }} -eq 0 || true
        echo validate
        test ${{ steps.validate.outputs.exitcode }} -eq 0 || true
